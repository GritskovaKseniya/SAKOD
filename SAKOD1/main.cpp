//Lab1List.cpp
/*
Цель: Создание списка(стека), с реализацией функций: добавление, удаление элементов списка, печать списка на экране.
Автор:Грицкова К.А.
Дата: 05.02.2019
*/
#include <iostream>

using namespace std;

struct List
{
    int x; // отдельный элемент
    List *Next; // указатель на след. элемент стека
    List *Head; // голова стека
};

void Add(int x, List *&MyList) /* функция добавления передаем в нее 2 параметра:
значение элемента, который хотим добавить, и список,
в который будем класть новую переменную */
{
    List *temp=new List; // выделяем память для нового элемента
    temp->x=x; // записываем в поле х значение элемента х
    temp->Next=MyList->Head; /*говорим, что следующий элемент - это предыдущий:
    указатель на следующий элемент стека теперь указывает на голову*/
    MyList->Head=temp; /* сдвигаем голову на позицию вперед:
    присваиваем указателю на голову стека значение temp*/
}

void Print(List *MyList) /*функция вывода стека на экран:
передаем наш списокв функцию*/
{
    List *temp=MyList->Head; //объявляем указатель и говорим ему, что он в голове стека
    while(temp!=NULL) //обходим стек
    {
        //в цикл передаем указатель переменной temp
        cout << temp->x << " "; //выводим на экран значение по указателю на переменную
        temp=temp->Next;//передаем в переменную новый указатель на следующий элемент
    }
}

void Delete(List *MyList) //функция удаления: передаем на список в функцию
{
        List *temp=MyList->Head->Next; /*временная переменная для хранения адреса след. элемента
        объявляем временную переменную, которая уазывает на следующий элемент после головы стека*/
        delete MyList->Head; // удаляем начальный элемент
        MyList->Head=temp; // меняем адрес на следующий элемент

}

int main() //главная функция
{
    setlocale(LC_ALL, "Russian"); //функция для корректного вывода данных на русском языке
    List *MyList = new List; // создаем стек
    MyList->Head = NULL; //инициализируем первый элемент (указывает на пустую ссылку)

    int answer; //создаем переменную "ответ"
    int element=0; //создаем переменную для вызова команды и присваеваем ей значение 0

    while(!0) //меню
    {

        cout << "Выберите действие:" << endl;
        cout << "1 - Создать" << endl;
        cout << "2 - Удалить" << endl;
        cout << "3 - Вывести" << endl;
        cout << "0 - Выйти из программы" << endl;
        cin >> answer;

        /*создаем кейс, который вызывает функции в зависимости от того,
        какую команду выбрал пользователь*/
        switch(answer)
        {
            //про выборе комманды "0" удаляем стек и завершаем работу
        case 0:
            cout << "exit in progress..." << endl;
            while(MyList->Head!=NULL) //полностью удаляем стек
            {
                List *temp=MyList->Head->Next;
                delete MyList->Head;
                MyList->Head=temp;
            }
            delete MyList;
            return 0;

            /*привыботе команды "1" спрашиваем число, которое пользователь
            хочет добавить в стек и вызываем функцию Add*/
        case 1:
            cout << "Введите число для добавления: " <<endl;
            cin >> element;
            Add(element,MyList);

            cout << "число добавлено" << endl;
            cout <<endl;
            break;

            /* при вызове команды "3" проверяем не пустой ли наш стек, если пустой,
            то выводим сообщение пользователю о том, что стек пуст, если же нет,
            то вызываем функцию Print*/
        case 3:
            if(MyList->Head==NULL)
            {
                cout << "Стек пуст :(" <<endl;
                cout << endl;
                break;
            }
            cout << "твой стек: " << endl;

            Print(MyList);
            cout << endl;
            cout << endl;
            break;

            /*если пользователь выбирает команду "2", то проверяем не пусто ли стек
            (если пустой, то выводим сообщение об ошибке), если не пустой,
            то вызываем функцию Delete*/
        case 2:
            if(MyList->Head==NULL)
            {
                cout << "error стек пуст" << endl;
                cout << endl;
                break;
            }
            Delete(MyList);
            cout << "число удалено" << endl;
            cout << endl;
            cout << endl;
            break;

        }
    }
    return 0;
}
